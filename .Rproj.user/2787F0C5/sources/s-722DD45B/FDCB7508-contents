---
title: "Heat and Occupation in heatlabor project directory"
author: "Diego Flores"
date: "8/16/2024"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(janitor)
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stargazer)
library(caret)
library(car)
#install.packages("sf")
library(sf)
library(usmap)
library(RColorBrewer)
library(maps)
library(mapdata)
library(leaflet)
library(lubridate)
library(choroplethr)
#install.packages("countyweather")  #not available for this R version
#install.packages("rnoaa")
library(sp)
library(spatial)
library(devtools)
#install.packages("osmdata")
library(mapview)
library(osmdata)
#install.packages("httr")
library(httr)
library(leaflet)

```

Consider using a leaflet map, connects to google API, zooming sp - more traditional gis work
```{r api_install, include= FALSE}
# install_github("mikeasilva/blsAPI") #success 
```

```{r industry_function, include= FALSE}
# qcewGetIndustryData <- function (year, qtr, industry)
  
qcewGetIndustryData <- function (year, qtr, industry) {
	url <- "http://data.bls.gov/cew/data/api/YEAR/QTR/industry/INDUSTRY.csv"
	url <- sub("YEAR", year, url, ignore.case=FALSE)
	url <- sub("QTR", tolower(qtr), url, ignore.case=FALSE)
	url <- sub("INDUSTRY", industry, url, ignore.case=FALSE)
	read.csv(url, header = TRUE, sep = ",", quote="\"", dec=".", na.strings=" ", skip=0)
}
```

``` {r load_indsutry_data, include = FALSE}
ffood <- qcewGetIndustryData("2023", "a", "722513")
str(ffood)
lac_ff <- ffood %>% 
  rename(fips = area_fips) %>% 
  filter(fips == "06037")
  
carwash <- qcewGetIndustryData("2023", "a", "811192")
lac_carwash <- carwash %>% 
  rename(fips = area_fips) %>% 
  filter(fips == "811192")
```

Area notes:
06037	Los Angeles County, California 
06059	Orange County, California
06071	San Bernardino County, California
Operating warehousing and storage facilities and providing related 
logistics services--are classified in Industry Group 4931, Warehousing and Storage.

```{r qcewarea_function, include= FALSE}
qcewGetAreaData <- function(year, qtr, area) {
	url <- "http://data.bls.gov/cew/data/api/YEAR/QTR/area/AREA.csv"
	url <- sub("YEAR", year, url, ignore.case=FALSE)
	url <- sub("QTR", tolower(qtr), url, ignore.case=FALSE)
	url <- sub("AREA", toupper(area), url, ignore.case=FALSE)
	read.csv(url, header = TRUE, sep = ",", quote="\"", dec=".", na.strings=" ", skip=0)
}
```
CODEBOOK notes
own_code - 3 = public ownersip 
annual_avg_estabs	= Annual average of quarterly establishment counts for a given year
total_annual_wages =	Sum of the four quarterly total wage levels for a given year
annual_contributions	=	Sum of the four quarterly contribution totals for a given year
annual_avg_wkly_wage	= Avg weekly wage based on 12-monthly employment levels and annual wage levels.
avg_annual_pay	=	Average annual pay

location quotient 
over the year change 
```{r load_qcew_by_area, include= FALSE}
lac_naics <- qcewGetAreaData("2023", "a", "06037") %>% 
  clean_names()     #all industries in LAC 
oc_naics <- qcewGetAreaData("2023", "a", "06059") %>% 
  clean_names()     # all in OC
sb_naics <- qcewGetAreaData("2023", "a", "06071") %>% 
  clean_names()     # all in SB county 
```

``` {r subset_naics}
lac_naics2 <-  lac_naics %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513"))
lapply(lac_naics2, function(x) sum(is.na(x))) # 0 NA's as expected? yes

print(names(lac_naics))
lac_naics2 <- lac_naics2[-c(2, 4:5, 
                            7:8, 16, 24)]  #removing non-interest vars 

assign_industry_fun <- function(naics, taxable_annual_wages) {
  industry <- case_when(
    naics == 493110 & taxable_annual_wages == 0 ~ "Warehouse & Storage (public)",  # More specific condition first
    naics == 493110 ~ "Warehouse & Storage (private)",  # General condition second
    naics == 722513 ~ "Fast Food",
    naics == 811192 ~ "Car Wash",
    naics == 315 ~ "Apparel Manufacturing", 
    TRUE ~ NA_character_
  )
  return(industry)
}
#Applying Function
lac_naics2 <- lac_naics2 %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen
  select(1:2, industry, everything())             # function only applies to vectorized lists not entire df 

str(lac_naics2)
#troubleshootign function -- it works 
lac_naics2 %>% 
  filter(naics == 493110) %>% #filter for warehouse 
  select(industry, naics, taxable_annual_wages)
```

```{r subset_oc_sb}
getwd()
oc_naics <-  oc_naics %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513"))
oc_naics <- oc_naics[-c(2, 4:5, 7:8, 16, 24)] %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% 
  select(1:2, industry, everything())

sb_naics <- sb_naics %>% 
  rename(fips = area_fips,
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513")) 
sb_naics <- sb_naics[-c(2, 4:5, 7:8, 16, 24)] %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% 
  select(1:2, industry, everything())
sb_naics <- sb_naics[-1, ] #remove unwanted row of public fast food establishment
```

```{r failed_merge}
industry <- merge(lac_naics2, oc_naics, by = c("fips", "naics"), all = "TRUE")
industry <- merge(industry, sb_naics, by = c("fips", "naics"), all = "TRUE")
str(industry)
rm(industry) #left join nor full join achieve deisred result, need tidydata see below
```
Note: What other industries are we interested in viewing employment statistics on? 
```{r bind_rows_merge}
#add county identifier 
lac_naics2$county <- "Los Angeles County"
oc_naics$county <- "Orange County"
sb_naics$county <- "San Bernardino County"
#BIND ROW
industries <- bind_rows(lac_naics2, oc_naics, sb_naics) %>% 
  select(1, county, everything()) 
industries <- industries[-c(1,6,11), ] #success: removed warehouse public
print(names(industries))
```

```{r merge_visuals}
#DESCRIPTIVE STATS 
library(ggthemes)
p <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = county)) 

p1 <- p + geom_bar(stat = "identity", position = "dodge") + labs(title = "Total Industry Establishments by County (2023)", 
       y = "Annual Average Establishments",
       x = "Industry",
       caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p1 + theme_linedraw()
p1 + theme_economist()
# annual_avg_emplvl
# preview the different warehouse employment for warehouses across counties 
```
From this figure we can see the lion's share of employment that is the fast food industry. Los Anegeles County through its sheer size expectedly has the lion's share of fast food establishments. Cutting the fast food industry out of the picutre we can zoom in on the 
## Bureau of Labor Statistics Quartlery Census on Employment and Wages

```{r sample_area_df, echo = FALSE}
#sample NAICS df, To do: download LA and OC and include all of them in this df preview 
lac_naics2 %>%
  kbl(caption = "LA County QCEW 2023") %>%
  kable_classic(full_width = F)
```

```{r osm_nominatum_api}
library(osmdata)
# bounding box 
# lac_bb <- getbb("Los Angeles County, California")
# url <- "http://httpbin.org/ip"
# ip <- httr::GET(url)
# httr::content(ip)
# httr::GET("https://nominatim.openstreetmap.org/search?q=Los+Angeles+County+California&format=json")
# above doesnt work, use places API instead, nominatum uses sf files to plot 
# exmaple below: mapview(pharmacies_sf$osm_points, zcol = "name")
```

```{r}
installed <- as.data.frame(installed.packages())

write.csv(installed, 'installed_previously.csv')
```

```{r streets_api}
get_places <- function(api_key, location, radius = 25000, type = "restaurant") {
  base_url <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
  all_places <- data.frame()
  next_page_token <- NULL

  repeat {
    response <- GET(base_url, query = list(
      location = location,
      radius = radius,
      type = type,
      keyword = "fast food",
      key = api_key,
      pagetoken = next_page_token
    ))
    content <- content(response, "parsed")
    
    if (content$status != "OK") {
      stop("API request was not successful: ", content$status)
    }
    places <- content$results
    places_df <- data.frame(
      name = sapply(places, function(x) x$name),
      lat = sapply(places, function(x) x$geometry$location$lat),
      lng = sapply(places, function(x) x$geometry$location$lng),
      address = sapply(places, function(x) x$vicinity)
    )
    all_places <- rbind(all_places, places_df)
    if (!is.null(content$next_page_token)) {
      next_page_token <- content$next_page_token
      Sys.sleep(2)  # Required delay before using next_page_token
    } else {
      break
    }
  }
  return(all_places)
}
#defined a function to query the API

api_key <- "AIzaSyDxCIOyFiUyQyPDMkoSfJntu_JQPhGPLOI"
la_center_cooridnate <- "34.0522,-118.2437" # negative for west i believe 
radius <- 25000 #25000 km  #25 km ~ 15 mi 

ffood_geoloc <- get_places(api_key, la_center_cooridnate, radius, type = "restaurant")
```

```{r map1}
#create map widget, initial layer 
m <- leaflet(data = ffood_geoloc) %>% 
  addTiles()
m %>% addCircleMarkers(
  ~lng, ~lat, # ~ calls the columns from df above, positions markers on map
  label = ~paste(name, address), 
  radius = 4
)
```

