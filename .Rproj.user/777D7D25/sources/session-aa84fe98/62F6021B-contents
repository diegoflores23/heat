---
title: "Indoor Heat and Occupation"
date: "8/16/2024"
format: 
  html: 
    echo: false
    toc: true
    toc_float: true
    
editor_options: 
  markdown: 
    wrap: 72
---

# Introduction

Seven California workers died from indoor heat from [2010 to
2017](https://www.rand.org/pubs/working_papers/WRA1386-1.html). The real
number is believed to be severely lower because of the lack of
recognition of idnoor heat as a factor in these cases of death. many
more ED vists can actually be attributed to heat but arent reported

great
[calmatters](https://calmatters.org/politics/capitol/2024/02/workplace-safety-california-indoor-heat/)
article outlining the importance of indoor heat standard and mentioning
citations

calosha
[complaints](https://calmatters.org/wp-content/uploads/2024/02/KSBD-CalOSHA-Heat-Citations-01-31-24.pdf)
from amazon fulfiment center 2535 e 3rd st san bernardino , subsequent
agree/ disagree

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(readr)
#install.packages("patchwork")
library(patchwork)
library(kableExtra)
library(ggthemes)
library(readxl)
library(janitor)
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stargazer)
library(gridExtra)
library(caret)
library(car)
#install.packages("sf")
library(sf)
library(usmap)
library(RColorBrewer)
library(maps)
library(mapdata)
library(leaflet)
library(lubridate)
library(choroplethr)
#install.packages("countyweather")  #not available for this R version
#install.packages("rnoaa")
library(sp)
library(spatial)
library(devtools)
#install.packages("osmdata")
library(mapview)
library(osmdata)
#install.packages("httr")
library(httr)
# install.packages("summarytools")
library(summarytools)
```

Consider using a leaflet map, connects to Google API, zooming sp - more
traditional gis work

```{r api_install, include= FALSE}
#install_github("mikeasilva/blsAPI") #success 
```

```{r industry_function, include= FALSE}
qcewGetIndustryData <- function (year, qtr, industry) {
	url <- "http://data.bls.gov/cew/data/api/YEAR/QTR/industry/INDUSTRY.csv"
	url <- sub("YEAR", year, url, ignore.case=FALSE)
	url <- sub("QTR", tolower(qtr), url, ignore.case=FALSE)
	url <- sub("INDUSTRY", industry, url, ignore.case=FALSE)
	read.csv(url, header = TRUE, sep = ",", quote="\"", dec=".", na.strings=" ", skip=0)
}
```

```{r 2023_load_indsutry_data, include = FALSE}
ffood <- qcewGetIndustryData("2023", "a", "722513")
lac_ff <- ffood %>% 
  rename(fips = area_fips) %>% 
  filter(fips == "06037") 
  
carwash <- qcewGetIndustryData("2023", "a", "811192")
lac_carwash <- carwash %>% 
  rename(fips = area_fips) %>% 
  filter(fips == "811192")
```

Area notes: 06037 Los Angeles County,

California 06059 Orange County,

California 06071 San Bernardino County, California

Operating warehousing and storage facilities and providing related
logistics services--are classified in Industry Group 4931, Warehousing
and Storage.

```{r qcewarea_function, include= FALSE}
qcewGetAreaData <- function(year, qtr, area) {
	url <- "http://data.bls.gov/cew/data/api/YEAR/QTR/area/AREA.csv"
	url <- sub("YEAR", year, url, ignore.case=FALSE)
	url <- sub("QTR", tolower(qtr), url, ignore.case=FALSE)
	url <- sub("AREA", toupper(area), url, ignore.case=FALSE)
	read.csv(url, header = TRUE, sep = ",", quote="\"", dec=".", na.strings=" ", skip=0)
}
```

### **CODEBOOK notes**

own_code - 3 = public ownersip

annual_avg_estabs = Annual average of quarterly establishment counts for
a given year

total_annual_wages = Sum of the four quarterly total wage levels for a
given year

annual_contributions = Sum of the four quarterly contribution totals for
a given year

annual_avg_wkly_wage = Avg weekly wage based on 12-monthly employment
levels and annual wage levels.

avg_annual_pay = Average annual pay

location quotient: over the year change

#### **Current Population Survey**

CPS counts employed people, whereas the QCEW program counts covered.

[**QCEW 2024 Q1 data available**](https://www.bls.gov/cew/)

DATA: retrieving by area/county then subsetting by NAICS/inudstry

```{r load_qcew_by_area, include= FALSE}
lac_naics <- qcewGetAreaData("2023", "a", "06037") %>% 
  clean_names()     #all industries in LAC 
oc_naics <- qcewGetAreaData("2023", "a", "06059") %>% 
  clean_names()     # all in OC
sb_naics <- qcewGetAreaData("2023", "a", "06071") %>% 
  clean_names()     # all in SB county 
```
#### subsetting for naics industries of interest 
```{r subset_naics_industry}
lac_naics2 <-  lac_naics %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter for NAICS obsvr that r in this vector
                      "493110", "722513"))
# NA check below, can ignore 
#lapply(lac_naics2, function(x) sum(is.na(x))) # 0 NA's as expected? yes
#print(names(lac_naics))
lac_naics2 <- lac_naics2[-c(2, 4:5, 
                            7:8, 16, 24)]  #removing non-interest vars
  
```

```{r assign_industry23}
assign_industry_fun <- function(naics, taxable_annual_wages) {
  industry <- case_when( 
    # More specific & condition first
    naics == 493110 & taxable_annual_wages == 0 ~ "Warehouse & Storage (public)",  
    naics == 493110 ~ "Warehouse & Storage",  # General condition second
    naics == 722513 ~ "Fast Food",
    naics == 811192 ~ "Car Wash",
    naics == 315 ~ "Apparel Mfg.", 
    TRUE ~ NA_character_
  )
  return(industry)
}
## Case_when function is great for creating new rows based on conditions, great to use with filter in order to remove rows i believe 
#function 2 for 2024 Q1
industry_fun24 <- function(naics, taxable_qtrly_wages) {
  industry <- case_when( 
    # More specific & condition first
    naics == 493110 & taxable_qtrly_wages == 0 ~ "Warehouse & Storage (public)",  
    naics == 493110 ~ "Warehouse & Storage",  # General condition second
    naics == 722513 ~ "Fast Food",
    naics == 811192 ~ "Car Wash",
    naics == 315 ~ "Apparel Mfg.", 
    TRUE ~ NA_character_
  )
  return(industry)
}
#Applying Function 1
lac_naics2 <- lac_naics2 %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen
  select(1:2, industry, everything())             # function only applies to vectorized lists not entire df 

#str(lac_naics2)
#troubleshootign function -- it works 
#lac_naics2 %>% 
  #filter(naics == 493110) %>% #filter for warehouse 
  #select(industry, naics, taxable_annual_wages)
```

```{r all_2024}
#2024 Q1 - call data 
lac_naics24 <- qcewGetAreaData("2024", "1", "06037") %>% 
  clean_names()
oc_naics24 <- qcewGetAreaData("2024", "1", "06059") %>% 
  clean_names()     # all in OC
sb_naics24 <- qcewGetAreaData("2024", "1", "06071") %>% 
  clean_names()     # all in SB county 
# minor renaming 
lac_naics24 <- lac_naics24 %>%
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter for NAICS obsvr that r in this vector
                      "493110", "722513"))
oc_naics24 <-  oc_naics24 %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513"))

sb_naics24 <- sb_naics24 %>% 
  rename(fips = area_fips,
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513")) 
```

case_when follows (condition ~ result), evaluates each condition in order, and if it finds the first TRUE condition for a row, it applies the corresponding result. DONE 
```{r flag_filter_public_rows}
lac_naics24 <- lac_naics24 %>% 
  mutate(flag = ifelse(lac_naics24$own_code == 3, TRUE, FALSE)) %>% 
  filter(flag == FALSE)
oc_naics24 <- oc_naics24 %>% 
  mutate(flag = ifelse(oc_naics24$own_code == 3, TRUE, FALSE)) %>% 
  filter(flag == FALSE)
#sb_naics24$flag <- sb_naics24 %>% 
  #mutate(flag = (case_when(own_code == 3 | own_code == 1 ~ TRUE,
  #         TRUE ~ FALSE ))) #general condition!! 
sb_naics24 <- sb_naics24 %>% 
  mutate(flag = case_when(own_code==3 | own_code ==1 ~ TRUE,
                          TRUE ~ FALSE)) %>% 
  filter(flag == FALSE) #FILTER public oor fed govt rows out

```

```{r assign_industry24}
# Applying function 2 - assigning industry  
lac_naics24 <- lac_naics24 %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())

oc_naics24 <- oc_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% 
  mutate(industry = 
           (industry_fun24(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())

sb_naics24 <- sb_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% 
  mutate(industry = 
           (industry_fun24(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())#remove unwanted row of public fast food establishment
```

```{r failed_merge}
#industry <- merge(lac_naics2, oc_naics, by = c("fips", "naics"), all = "TRUE")
#industry <- merge(industry, sb_naics, by = c("fips", "naics"), all = "TRUE")
#str(industry)
#rm(industry) #left join nor full join achieve deisred result, need tidydata see below
```

Note: What other industries are we interested in viewing employment
statistics on?

```{r bind_rows_merge}
#add county identifier 
lac_naics2$county <- "Los Angeles County"
oc_naics$county <- "Orange County"
sb_naics$county <- "San Bernardino County"
#BIND ROW
industries <- bind_rows(lac_naics2, oc_naics, sb_naics) %>% 
  select(1, county, everything()) 
industries <- industries[-c(1,6,11), ] #success: removed warehouse public
#print(names(industries))
#industries <- industries

#merge 2024 
lac_naics24$county <- "Los Angeles County"
oc_naics24$county <- "Orange County"
sb_naics24$county <- "San Bernardino County"
#BIND ROW
industries24 <- bind_rows(lac_naics24, oc_naics24, sb_naics24) %>% 
  select(1, county, everything()) 

industries24 <- industries24 %>%  select(-c(3, 6:7, 10))
```
### ran into issues in bind row merge some NA's that are fine but parse out the rows rthat have 0 taxable qtrly wages etc, no industry value in lac_naics24 -- Issue solved! 
Summary statistics.w/ Summarytools pkg

```{r summary_tools_descriptive_stats}
#str(industries24)
industries24 %>% 
  select(-c(fips, naics)) %>% 
  dfSummary(
    graph.col = TRUE, style = "grid", 
    graph.magnif = 0.75
  ) %>% stview()
```

```{r establishment_ bycounty_visual}
#DESCRIPTIVE STATS 
p <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = county)) 
p1 <- p + geom_bar(stat = "identity", position = "dodge") + labs(title = "Total Industry Establishments by County (2023)", 
       y = "Annual Average Establishments",
       x = "Industry",
       caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p1 <- p1 + theme_linedraw() + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# p1 + theme_fivethirtyeight()
```

```{r industry_bycounty_visual, results = 'hide'}
#By industry, faceted into three counties 
p2 <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = industry)) + 
  geom_bar(stat = "identity", position = "dodge") + labs(title = "Total Industry Establishments by County (2023)", y = "Annual Average Establishments", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) #not good? no real county info (base layer)
```

```{r industry_bycounty_visual2}
p2 <- p2 + theme_linedraw()+ facet_wrap(~ county) + theme(axis.text.x = element_text(angle = 25, hjust = 1)) #good but too crowded right now 
# annual_avg_emplvl
# preview the different warehouse employment for warehouses across counties
p2
```

From this figure we can see the lion's share of employment that is the
fast food industry. Los Anegeles County through its sheer size, of
course, constitutes a majority of the total count of fast food
restaurants. Cutting the fast food industry out of the picture we can
zoom in on\
\### San Bernardino County

```{r sb_industry_count }
industries_filter <- industries %>% 
  filter(county == "San Bernardino County")
p3 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_estabs, fill = industry)) + geom_bar(stat = "identity", position = "dodge", width = 0.5) + labs(title = "Industry Total in San Bernardino County (2023)", y = "Annual Average Establishments", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p3 <- p3 + theme_linedraw() +theme(axis.text.x = element_text(angle = -370, hjust = 0))+ coord_cartesian(ylim = c(0,750))
p3
```

```{r wages}
industries_filter <- industries %>% 
  filter(county == "San Bernardino County")
p4 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_wkly_wage, fill = industry)) + geom_bar(stat = "identity", width = 0.5) + labs(title = "Average Weekly Wages in San Bernardino County (2023)", y = "Average Weekly wages", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p4 <- p4 + theme_linedraw() + theme(axis.text.x = element_text(angle = -370, hjust = 0))
p4
# print(names(industries))
```

```{r fig.show='hold', out.width="100%"}
#Showing two figures never works!!! figure it out soon 
## p1 + p2
```

## Bureau of Labor Statistics Quarterly Census on Employment and Wages(QCEW) 2023

```{r sample_area_df, echo = FALSE}
#DONE sample NAICS df, To do: download LA and OC and include all of them in this df preview
industries2 <- industries_filter[-c(1,3,5)]
industries %>%
  kbl(table.attr = 'data-quarto-disable-processing="true"', 
      caption = "QCEW 2023") %>% 
  scroll_box(width = "90%", height = "400px" ) %>% 
  kable_styling(bootstrap_options = c("striped", "condensed"), 
                full_width = F) 
  
```

**Notes on. kable styling: column_spec!!!** mtcars\[1:8, 1:8\] %\>%
kbl() %\>% kable_paper(full_width = F) %\>% column_spec(2, color =
spec_color(mtcars$mpg[1:8]),
              link = "https://haozhu233.github.io/kableExtra/") %>%
  column_spec(6, color = "white",
              background = spec_color(mtcars$drat\[1:8\], end = 0.7),
popover = paste("am:", mtcars\$am\[1:8\]))

What about text wrapping? if i want ot align_right how can I write that
text? might have to use a function? Currently alright right doesnt work
well bcus table is huge

```{r osm_nominatum_api}
#library(osmdata)
# bounding box 
# lac_bb <- getbb("Los Angeles County, California")
# url <- "http://httpbin.org/ip"
# ip <- httr::GET(url)
# httr::content(ip)
# httr::GET("https://nominatim.openstreetmap.org/search?q=Los+Angeles+County+California&format=json")
# above doesnt work, use places API instead, nominatum uses sf files to plot 
# exmaple below: mapview(pharmacies_sf$osm_points, zcol = "name")
```

```{r}
#installed <- as.data.frame(installed.packages())

#write.csv(installed, 'installed_previously.csv')
```

Places API (new): includes nearby search and text search The main
difference between the two searches is that Text Search (New) lets you
specify an arbitrary search string while Nearby Search (New) requires a
specific area in which to search. Places API (not new):\
- A Place Search returns a list of places along with summary information
about each place; additional information is available via a Place
Details query.

```{r streets_api}
get_places <- function(api_key, location, radius = 25000, type = "restaurant") {
  base_url <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
  all_places <- data.frame()
  next_page_token <- NULL

  repeat {
    response <- GET(base_url, query = list(
      location = location,
      radius = radius,
      type = type,
      keyword = "fast food",
      key = api_key,
      pagetoken = next_page_token
    ))
    content <- content(response, "parsed")
    
    if (content$status != "OK") {
      stop("API request was not successful: ", content$status)
    }
    places <- content$results
    places_df <- data.frame(
      name = sapply(places, function(x) x$name),
      lat = sapply(places, function(x) x$geometry$location$lat),
      lng = sapply(places, function(x) x$geometry$location$lng),
      address = sapply(places, function(x) x$vicinity)
    )
    all_places <- rbind(all_places, places_df)
    if (!is.null(content$next_page_token)) {
      next_page_token <- content$next_page_token
      Sys.sleep(2)  # Required delay before using next_page_token
    } else {
      break
    }
  }
  return(all_places)
}
#defined a function above to query the API

api_key <- "AIzaSyDxCIOyFiUyQyPDMkoSfJntu_JQPhGPLOI"
la_center_cooridnate <- "34.0522,-118.2437" # negative for west i believe 
radius <- 25000 #25000 km  #25 km ~ 15 mi 

ffood_geoloc <- get_places(api_key, la_center_cooridnate, radius, type = "restaurant")
```

## Mapping the Fast Food Industry

```{r map1}
#create map widget, initial layer 
m <- leaflet(data = ffood_geoloc) %>% 
  addTiles()
m %>% addCircleMarkers(
  ~lng, ~lat, # ~ calls the columns from df above, positions markers on map
  label = ~paste(name, address), 
  radius = 3
)
```
