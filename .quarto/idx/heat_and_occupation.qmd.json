{"title":"Indoor Heat and Occupation","markdown":{"yaml":{"title":"Indoor Heat and Occupation","date":"8/16/2024","format":{"html":{"echo":false,"toc":true,"toc_float":true}},"editor_options":{"markdown":{"wrap":72}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nSeven California workers died from indoor heat from [2010 to\n2017](https://www.rand.org/pubs/working_papers/WRA1386-1.html). The real\nnumber is believed to be severely lower because of the lack of\nrecognition of idnoor heat as a factor in these cases of death. many\nmore ED vists can actually be attributed to heat but arent reported\n\ngreat\n[calmatters](https://calmatters.org/politics/capitol/2024/02/workplace-safety-california-indoor-heat/)\narticle outlining the importance of indoor heat standard and mentioning\ncitations\n\ncalosha\n[complaints](https://calmatters.org/wp-content/uploads/2024/02/KSBD-CalOSHA-Heat-Citations-01-31-24.pdf)\nfrom amazon fulfiment center 2535 e 3rd st san bernardino , subsequent\nagree/ disagree\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nlibrary(readr)\n#install.packages(\"patchwork\")\nlibrary(patchwork)\nlibrary(kableExtra)\nlibrary(ggthemes)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stargazer)\nlibrary(gridExtra)\nlibrary(caret)\nlibrary(car)\n#install.packages(\"sf\")\nlibrary(sf)\nlibrary(usmap)\nlibrary(RColorBrewer)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(leaflet)\nlibrary(lubridate)\nlibrary(choroplethr)\n#install.packages(\"countyweather\")  #not available for this R version\n#install.packages(\"rnoaa\")\nlibrary(sp)\nlibrary(spatial)\nlibrary(devtools)\n#install.packages(\"osmdata\")\nlibrary(mapview)\nlibrary(osmdata)\n#install.packages(\"httr\")\nlibrary(httr)\n# install.packages(\"summarytools\")\nlibrary(summarytools)\n```\n\nConsider using a leaflet map, connects to Google API, zooming sp - more\ntraditional gis work\n\n```{r api_install, include= FALSE}\n#install_github(\"mikeasilva/blsAPI\") #success \n```\n\n```{r industry_function, include= FALSE}\nqcewGetIndustryData <- function (year, qtr, industry) {\n\turl <- \"http://data.bls.gov/cew/data/api/YEAR/QTR/industry/INDUSTRY.csv\"\n\turl <- sub(\"YEAR\", year, url, ignore.case=FALSE)\n\turl <- sub(\"QTR\", tolower(qtr), url, ignore.case=FALSE)\n\turl <- sub(\"INDUSTRY\", industry, url, ignore.case=FALSE)\n\tread.csv(url, header = TRUE, sep = \",\", quote=\"\\\"\", dec=\".\", na.strings=\" \", skip=0)\n}\n```\n\n```{r 2023_load_indsutry_data, include = FALSE}\nffood <- qcewGetIndustryData(\"2023\", \"a\", \"722513\")\nlac_ff <- ffood %>% \n  rename(fips = area_fips) %>% \n  filter(fips == \"06037\") \n  \ncarwash <- qcewGetIndustryData(\"2023\", \"a\", \"811192\")\nlac_carwash <- carwash %>% \n  rename(fips = area_fips) %>% \n  filter(fips == \"811192\")\n```\n\nArea notes: 06037 Los Angeles County,\n\nCalifornia 06059 Orange County,\n\nCalifornia 06071 San Bernardino County, California\n\nOperating warehousing and storage facilities and providing related\nlogistics services--are classified in Industry Group 4931, Warehousing\nand Storage.\n\n```{r qcewarea_function, include= FALSE}\nqcewGetAreaData <- function(year, qtr, area) {\n\turl <- \"http://data.bls.gov/cew/data/api/YEAR/QTR/area/AREA.csv\"\n\turl <- sub(\"YEAR\", year, url, ignore.case=FALSE)\n\turl <- sub(\"QTR\", tolower(qtr), url, ignore.case=FALSE)\n\turl <- sub(\"AREA\", toupper(area), url, ignore.case=FALSE)\n\tread.csv(url, header = TRUE, sep = \",\", quote=\"\\\"\", dec=\".\", na.strings=\" \", skip=0)\n}\n```\n\n### **CODEBOOK notes**\n\nown_code - 3 = public ownersip\n\nannual_avg_estabs = Annual average of quarterly establishment counts for\na given year\n\ntotal_annual_wages = Sum of the four quarterly total wage levels for a\ngiven year\n\nannual_contributions = Sum of the four quarterly contribution totals for\na given year\n\nannual_avg_wkly_wage = Avg weekly wage based on 12-monthly employment\nlevels and annual wage levels.\n\navg_annual_pay = Average annual pay\n\nlocation quotient: over the year change\n\n#### **Current Population Survey**\n\nCPS counts employed people, whereas the QCEW program counts covered.\n\n[**QCEW 2024 Q1 data available**](https://www.bls.gov/cew/)\n\nDATA: retrieving by area/county then subsetting by NAICS/inudstry\n\n```{r load_qcew_by_area, include= FALSE}\nlac_naics <- qcewGetAreaData(\"2023\", \"a\", \"06037\") %>% \n  clean_names()     #all industries in LAC \noc_naics <- qcewGetAreaData(\"2023\", \"a\", \"06059\") %>% \n  clean_names()     # all in OC\nsb_naics <- qcewGetAreaData(\"2023\", \"a\", \"06071\") %>% \n  clean_names()     # all in SB county \n```\n#### subsetting for naics industries of interest \n```{r subset_naics_industry}\nlac_naics2 <-  lac_naics %>% # Industries of interest below in LA county\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter for NAICS obsvr that r in this vector\n                      \"493110\", \"722513\"))\n# NA check below, can ignore \n#lapply(lac_naics2, function(x) sum(is.na(x))) # 0 NA's as expected? yes\n#print(names(lac_naics))\nlac_naics2 <- lac_naics2[-c(2, 4:5, \n                            7:8, 16, 24)]  #removing non-interest vars\n  \n```\n\n```{r assign_industry23}\nassign_industry_fun <- function(naics, taxable_annual_wages) {\n  industry <- case_when( \n    # More specific & condition first\n    naics == 493110 & taxable_annual_wages == 0 ~ \"Warehouse & Storage (public)\",  \n    naics == 493110 ~ \"Warehouse & Storage\",  # General condition second\n    naics == 722513 ~ \"Fast Food\",\n    naics == 811192 ~ \"Car Wash\",\n    naics == 315 ~ \"Apparel Mfg.\", \n    TRUE ~ NA_character_\n  )\n  return(industry)\n}\n## Case_when function is great for creating new rows based on conditions, great to use with filter in order to remove rows i believe \n#function 2 for 2024 Q1\nindustry_fun24 <- function(naics, taxable_qtrly_wages) {\n  industry <- case_when( \n    # More specific & condition first\n    naics == 493110 & taxable_qtrly_wages == 0 ~ \"Warehouse & Storage (public)\",  \n    naics == 493110 ~ \"Warehouse & Storage\",  # General condition second\n    naics == 722513 ~ \"Fast Food\",\n    naics == 811192 ~ \"Car Wash\",\n    naics == 315 ~ \"Apparel Mfg.\", \n    TRUE ~ NA_character_\n  )\n  return(industry)\n}\n#Applying Function 1\nlac_naics2 <- lac_naics2 %>% \n  mutate(industry = \n           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen\n  select(1:2, industry, everything())             # function only applies to vectorized lists not entire df \n\n#str(lac_naics2)\n#troubleshootign function -- it works \n#lac_naics2 %>% \n  #filter(naics == 493110) %>% #filter for warehouse \n  #select(industry, naics, taxable_annual_wages)\n```\n\n```{r all_2024}\n#2024 Q1 - call data \nlac_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06037\") %>% \n  clean_names()\noc_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06059\") %>% \n  clean_names()     # all in OC\nsb_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06071\") %>% \n  clean_names()     # all in SB county \n# minor renaming \nlac_naics24 <- lac_naics24 %>%\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter for NAICS obsvr that r in this vector\n                      \"493110\", \"722513\"))\noc_naics24 <-  oc_naics24 %>% # Industries of interest below in LA county\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter: see if NAICS obsvr r in the vector\n                      \"493110\", \"722513\"))\n\nsb_naics24 <- sb_naics24 %>% \n  rename(fips = area_fips,\n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter: see if NAICS obsvr r in the vector\n                      \"493110\", \"722513\")) \n```\n\ncase_when follows (condition ~ result), evaluates each condition in order, and if it finds the first TRUE condition for a row, it applies the corresponding result. DONE \n```{r flag_filter_public_rows}\nlac_naics24 <- lac_naics24 %>% \n  mutate(flag = ifelse(lac_naics24$own_code == 3, TRUE, FALSE)) %>% \n  filter(flag == FALSE)\noc_naics24 <- oc_naics24 %>% \n  mutate(flag = ifelse(oc_naics24$own_code == 3, TRUE, FALSE)) %>% \n  filter(flag == FALSE)\n#sb_naics24$flag <- sb_naics24 %>% \n  #mutate(flag = (case_when(own_code == 3 | own_code == 1 ~ TRUE,\n  #         TRUE ~ FALSE ))) #general condition!! \nsb_naics24 <- sb_naics24 %>% \n  mutate(flag = case_when(own_code==3 | own_code ==1 ~ TRUE,\n                          TRUE ~ FALSE)) %>% \n  filter(flag == FALSE) #FILTER public oor fed govt rows out\n\n```\n\n```{r assign_industry24}\n# Applying function 2 - assigning industry  \nlac_naics24 <- lac_naics24 %>% \n  mutate(industry = \n           (assign_industry_fun(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())\n\noc_naics24 <- oc_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% \n  mutate(industry = \n           (industry_fun24(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())\n\nsb_naics24 <- sb_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% \n  mutate(industry = \n           (industry_fun24(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())#remove unwanted row of public fast food establishment\n```\n\n```{r failed_merge}\n#industry <- merge(lac_naics2, oc_naics, by = c(\"fips\", \"naics\"), all = \"TRUE\")\n#industry <- merge(industry, sb_naics, by = c(\"fips\", \"naics\"), all = \"TRUE\")\n#str(industry)\n#rm(industry) #left join nor full join achieve deisred result, need tidydata see below\n```\n\nNote: What other industries are we interested in viewing employment\nstatistics on?\n\n```{r bind_rows_merge}\n#add county identifier \nlac_naics2$county <- \"Los Angeles County\"\noc_naics$county <- \"Orange County\"\nsb_naics$county <- \"San Bernardino County\"\n#BIND ROW\nindustries <- bind_rows(lac_naics2, oc_naics, sb_naics) %>% \n  select(1, county, everything()) \nindustries <- industries[-c(1,6,11), ] #success: removed warehouse public\n#print(names(industries))\n#industries <- industries\n\n#merge 2024 \nlac_naics24$county <- \"Los Angeles County\"\noc_naics24$county <- \"Orange County\"\nsb_naics24$county <- \"San Bernardino County\"\n#BIND ROW\nindustries24 <- bind_rows(lac_naics24, oc_naics24, sb_naics24) %>% \n  select(1, county, everything()) \n\nindustries24 <- industries24 %>%  select(-c(3, 6:7, 10))\n```\n### ran into issues in bind row merge some NA's that are fine but parse out the rows rthat have 0 taxable qtrly wages etc, no industry value in lac_naics24 -- Issue solved! \nSummary statistics.w/ Summarytools pkg\n\n```{r summary_tools_descriptive_stats}\n#str(industries24)\nindustries24 %>% \n  select(-c(fips, naics)) %>% \n  dfSummary(\n    graph.col = TRUE, style = \"grid\", \n    graph.magnif = 0.75\n  ) %>% stview()\n```\n\n```{r establishment_ bycounty_visual}\n#DESCRIPTIVE STATS \np <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = county)) \np1 <- p + geom_bar(stat = \"identity\", position = \"dodge\") + labs(title = \"Total Industry Establishments by County (2023)\", \n       y = \"Annual Average Establishments\",\n       x = \"Industry\",\n       caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np1 <- p1 + theme_linedraw() + theme(axis.text.x = element_text(angle = 15, hjust = 1))\n# p1 + theme_fivethirtyeight()\n```\n\n```{r industry_bycounty_visual, results = 'hide'}\n#By industry, faceted into three counties \np2 <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = industry)) + \n  geom_bar(stat = \"identity\", position = \"dodge\") + labs(title = \"Total Industry Establishments by County (2023)\", y = \"Annual Average Establishments\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) #not good? no real county info (base layer)\n```\n\n```{r industry_bycounty_visual2}\np2 <- p2 + theme_linedraw()+ facet_wrap(~ county) + theme(axis.text.x = element_text(angle = 25, hjust = 1)) #good but too crowded right now \n# annual_avg_emplvl\n# preview the different warehouse employment for warehouses across counties\np2\n```\n\nFrom this figure we can see the lion's share of employment that is the\nfast food industry. Los Anegeles County through its sheer size, of\ncourse, constitutes a majority of the total count of fast food\nrestaurants. Cutting the fast food industry out of the picture we can\nzoom in on\\\n\\### San Bernardino County\n\n```{r sb_industry_count }\nindustries_filter <- industries %>% \n  filter(county == \"San Bernardino County\")\np3 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_estabs, fill = industry)) + geom_bar(stat = \"identity\", position = \"dodge\", width = 0.5) + labs(title = \"Industry Total in San Bernardino County (2023)\", y = \"Annual Average Establishments\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np3 <- p3 + theme_linedraw() +theme(axis.text.x = element_text(angle = -370, hjust = 0))+ coord_cartesian(ylim = c(0,750))\np3\n```\n\n```{r wages}\nindustries_filter <- industries %>% \n  filter(county == \"San Bernardino County\")\np4 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_wkly_wage, fill = industry)) + geom_bar(stat = \"identity\", width = 0.5) + labs(title = \"Average Weekly Wages in San Bernardino County (2023)\", y = \"Average Weekly wages\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np4 <- p4 + theme_linedraw() + theme(axis.text.x = element_text(angle = -370, hjust = 0))\np4\n# print(names(industries))\n```\n\n```{r fig.show='hold', out.width=\"100%\"}\n#Showing two figures never works!!! figure it out soon \n## p1 + p2\n```\n\n## Bureau of Labor Statistics Quarterly Census on Employment and Wages(QCEW) 2023\n\n```{r sample_area_df, echo = FALSE}\n#DONE sample NAICS df, To do: download LA and OC and include all of them in this df preview\nindustries2 <- industries_filter[-c(1,3,5)]\nindustries %>%\n  kbl(table.attr = 'data-quarto-disable-processing=\"true\"', \n      caption = \"QCEW 2023\") %>% \n  scroll_box(width = \"90%\", height = \"400px\" ) %>% \n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                full_width = F) \n  \n```\n\n**Notes on. kable styling: column_spec!!!** mtcars\\[1:8, 1:8\\] %\\>%\nkbl() %\\>% kable_paper(full_width = F) %\\>% column_spec(2, color =\nspec_color(mtcars$mpg[1:8]),\n              link = \"https://haozhu233.github.io/kableExtra/\") %>%\n  column_spec(6, color = \"white\",\n              background = spec_color(mtcars$drat\\[1:8\\], end = 0.7),\npopover = paste(\"am:\", mtcars\\$am\\[1:8\\]))\n\nWhat about text wrapping? if i want ot align_right how can I write that\ntext? might have to use a function? Currently alright right doesnt work\nwell bcus table is huge\n\n```{r osm_nominatum_api}\n#library(osmdata)\n# bounding box \n# lac_bb <- getbb(\"Los Angeles County, California\")\n# url <- \"http://httpbin.org/ip\"\n# ip <- httr::GET(url)\n# httr::content(ip)\n# httr::GET(\"https://nominatim.openstreetmap.org/search?q=Los+Angeles+County+California&format=json\")\n# above doesnt work, use places API instead, nominatum uses sf files to plot \n# exmaple below: mapview(pharmacies_sf$osm_points, zcol = \"name\")\n```\n\n```{r}\n#installed <- as.data.frame(installed.packages())\n\n#write.csv(installed, 'installed_previously.csv')\n```\n\nPlaces API (new): includes nearby search and text search The main\ndifference between the two searches is that Text Search (New) lets you\nspecify an arbitrary search string while Nearby Search (New) requires a\nspecific area in which to search. Places API (not new):\\\n- A Place Search returns a list of places along with summary information\nabout each place; additional information is available via a Place\nDetails query.\n\n```{r streets_api}\nget_places <- function(api_key, location, radius = 25000, type = \"restaurant\") {\n  base_url <- \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n  all_places <- data.frame()\n  next_page_token <- NULL\n\n  repeat {\n    response <- GET(base_url, query = list(\n      location = location,\n      radius = radius,\n      type = type,\n      keyword = \"fast food\",\n      key = api_key,\n      pagetoken = next_page_token\n    ))\n    content <- content(response, \"parsed\")\n    \n    if (content$status != \"OK\") {\n      stop(\"API request was not successful: \", content$status)\n    }\n    places <- content$results\n    places_df <- data.frame(\n      name = sapply(places, function(x) x$name),\n      lat = sapply(places, function(x) x$geometry$location$lat),\n      lng = sapply(places, function(x) x$geometry$location$lng),\n      address = sapply(places, function(x) x$vicinity)\n    )\n    all_places <- rbind(all_places, places_df)\n    if (!is.null(content$next_page_token)) {\n      next_page_token <- content$next_page_token\n      Sys.sleep(2)  # Required delay before using next_page_token\n    } else {\n      break\n    }\n  }\n  return(all_places)\n}\n#defined a function above to query the API\n\napi_key <- \"AIzaSyDxCIOyFiUyQyPDMkoSfJntu_JQPhGPLOI\"\nla_center_cooridnate <- \"34.0522,-118.2437\" # negative for west i believe \nradius <- 25000 #25000 km  #25 km ~ 15 mi \n\nffood_geoloc <- get_places(api_key, la_center_cooridnate, radius, type = \"restaurant\")\n```\n\n## Mapping the Fast Food Industry\n\n```{r map1}\n#create map widget, initial layer \nm <- leaflet(data = ffood_geoloc) %>% \n  addTiles()\nm %>% addCircleMarkers(\n  ~lng, ~lat, # ~ calls the columns from df above, positions markers on map\n  label = ~paste(name, address), \n  radius = 3\n)\n```\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nSeven California workers died from indoor heat from [2010 to\n2017](https://www.rand.org/pubs/working_papers/WRA1386-1.html). The real\nnumber is believed to be severely lower because of the lack of\nrecognition of idnoor heat as a factor in these cases of death. many\nmore ED vists can actually be attributed to heat but arent reported\n\ngreat\n[calmatters](https://calmatters.org/politics/capitol/2024/02/workplace-safety-california-indoor-heat/)\narticle outlining the importance of indoor heat standard and mentioning\ncitations\n\ncalosha\n[complaints](https://calmatters.org/wp-content/uploads/2024/02/KSBD-CalOSHA-Heat-Citations-01-31-24.pdf)\nfrom amazon fulfiment center 2535 e 3rd st san bernardino , subsequent\nagree/ disagree\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nlibrary(readr)\n#install.packages(\"patchwork\")\nlibrary(patchwork)\nlibrary(kableExtra)\nlibrary(ggthemes)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stargazer)\nlibrary(gridExtra)\nlibrary(caret)\nlibrary(car)\n#install.packages(\"sf\")\nlibrary(sf)\nlibrary(usmap)\nlibrary(RColorBrewer)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(leaflet)\nlibrary(lubridate)\nlibrary(choroplethr)\n#install.packages(\"countyweather\")  #not available for this R version\n#install.packages(\"rnoaa\")\nlibrary(sp)\nlibrary(spatial)\nlibrary(devtools)\n#install.packages(\"osmdata\")\nlibrary(mapview)\nlibrary(osmdata)\n#install.packages(\"httr\")\nlibrary(httr)\n# install.packages(\"summarytools\")\nlibrary(summarytools)\n```\n\nConsider using a leaflet map, connects to Google API, zooming sp - more\ntraditional gis work\n\n```{r api_install, include= FALSE}\n#install_github(\"mikeasilva/blsAPI\") #success \n```\n\n```{r industry_function, include= FALSE}\nqcewGetIndustryData <- function (year, qtr, industry) {\n\turl <- \"http://data.bls.gov/cew/data/api/YEAR/QTR/industry/INDUSTRY.csv\"\n\turl <- sub(\"YEAR\", year, url, ignore.case=FALSE)\n\turl <- sub(\"QTR\", tolower(qtr), url, ignore.case=FALSE)\n\turl <- sub(\"INDUSTRY\", industry, url, ignore.case=FALSE)\n\tread.csv(url, header = TRUE, sep = \",\", quote=\"\\\"\", dec=\".\", na.strings=\" \", skip=0)\n}\n```\n\n```{r 2023_load_indsutry_data, include = FALSE}\nffood <- qcewGetIndustryData(\"2023\", \"a\", \"722513\")\nlac_ff <- ffood %>% \n  rename(fips = area_fips) %>% \n  filter(fips == \"06037\") \n  \ncarwash <- qcewGetIndustryData(\"2023\", \"a\", \"811192\")\nlac_carwash <- carwash %>% \n  rename(fips = area_fips) %>% \n  filter(fips == \"811192\")\n```\n\nArea notes: 06037 Los Angeles County,\n\nCalifornia 06059 Orange County,\n\nCalifornia 06071 San Bernardino County, California\n\nOperating warehousing and storage facilities and providing related\nlogistics services--are classified in Industry Group 4931, Warehousing\nand Storage.\n\n```{r qcewarea_function, include= FALSE}\nqcewGetAreaData <- function(year, qtr, area) {\n\turl <- \"http://data.bls.gov/cew/data/api/YEAR/QTR/area/AREA.csv\"\n\turl <- sub(\"YEAR\", year, url, ignore.case=FALSE)\n\turl <- sub(\"QTR\", tolower(qtr), url, ignore.case=FALSE)\n\turl <- sub(\"AREA\", toupper(area), url, ignore.case=FALSE)\n\tread.csv(url, header = TRUE, sep = \",\", quote=\"\\\"\", dec=\".\", na.strings=\" \", skip=0)\n}\n```\n\n### **CODEBOOK notes**\n\nown_code - 3 = public ownersip\n\nannual_avg_estabs = Annual average of quarterly establishment counts for\na given year\n\ntotal_annual_wages = Sum of the four quarterly total wage levels for a\ngiven year\n\nannual_contributions = Sum of the four quarterly contribution totals for\na given year\n\nannual_avg_wkly_wage = Avg weekly wage based on 12-monthly employment\nlevels and annual wage levels.\n\navg_annual_pay = Average annual pay\n\nlocation quotient: over the year change\n\n#### **Current Population Survey**\n\nCPS counts employed people, whereas the QCEW program counts covered.\n\n[**QCEW 2024 Q1 data available**](https://www.bls.gov/cew/)\n\nDATA: retrieving by area/county then subsetting by NAICS/inudstry\n\n```{r load_qcew_by_area, include= FALSE}\nlac_naics <- qcewGetAreaData(\"2023\", \"a\", \"06037\") %>% \n  clean_names()     #all industries in LAC \noc_naics <- qcewGetAreaData(\"2023\", \"a\", \"06059\") %>% \n  clean_names()     # all in OC\nsb_naics <- qcewGetAreaData(\"2023\", \"a\", \"06071\") %>% \n  clean_names()     # all in SB county \n```\n#### subsetting for naics industries of interest \n```{r subset_naics_industry}\nlac_naics2 <-  lac_naics %>% # Industries of interest below in LA county\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter for NAICS obsvr that r in this vector\n                      \"493110\", \"722513\"))\n# NA check below, can ignore \n#lapply(lac_naics2, function(x) sum(is.na(x))) # 0 NA's as expected? yes\n#print(names(lac_naics))\nlac_naics2 <- lac_naics2[-c(2, 4:5, \n                            7:8, 16, 24)]  #removing non-interest vars\n  \n```\n\n```{r assign_industry23}\nassign_industry_fun <- function(naics, taxable_annual_wages) {\n  industry <- case_when( \n    # More specific & condition first\n    naics == 493110 & taxable_annual_wages == 0 ~ \"Warehouse & Storage (public)\",  \n    naics == 493110 ~ \"Warehouse & Storage\",  # General condition second\n    naics == 722513 ~ \"Fast Food\",\n    naics == 811192 ~ \"Car Wash\",\n    naics == 315 ~ \"Apparel Mfg.\", \n    TRUE ~ NA_character_\n  )\n  return(industry)\n}\n## Case_when function is great for creating new rows based on conditions, great to use with filter in order to remove rows i believe \n#function 2 for 2024 Q1\nindustry_fun24 <- function(naics, taxable_qtrly_wages) {\n  industry <- case_when( \n    # More specific & condition first\n    naics == 493110 & taxable_qtrly_wages == 0 ~ \"Warehouse & Storage (public)\",  \n    naics == 493110 ~ \"Warehouse & Storage\",  # General condition second\n    naics == 722513 ~ \"Fast Food\",\n    naics == 811192 ~ \"Car Wash\",\n    naics == 315 ~ \"Apparel Mfg.\", \n    TRUE ~ NA_character_\n  )\n  return(industry)\n}\n#Applying Function 1\nlac_naics2 <- lac_naics2 %>% \n  mutate(industry = \n           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen\n  select(1:2, industry, everything())             # function only applies to vectorized lists not entire df \n\n#str(lac_naics2)\n#troubleshootign function -- it works \n#lac_naics2 %>% \n  #filter(naics == 493110) %>% #filter for warehouse \n  #select(industry, naics, taxable_annual_wages)\n```\n\n```{r all_2024}\n#2024 Q1 - call data \nlac_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06037\") %>% \n  clean_names()\noc_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06059\") %>% \n  clean_names()     # all in OC\nsb_naics24 <- qcewGetAreaData(\"2024\", \"1\", \"06071\") %>% \n  clean_names()     # all in SB county \n# minor renaming \nlac_naics24 <- lac_naics24 %>%\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter for NAICS obsvr that r in this vector\n                      \"493110\", \"722513\"))\noc_naics24 <-  oc_naics24 %>% # Industries of interest below in LA county\n  rename(fips = area_fips, \n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter: see if NAICS obsvr r in the vector\n                      \"493110\", \"722513\"))\n\nsb_naics24 <- sb_naics24 %>% \n  rename(fips = area_fips,\n         naics = industry_code) %>% \n  filter(naics %in% c(\"811192\", \"315\",   # %>%, filter: see if NAICS obsvr r in the vector\n                      \"493110\", \"722513\")) \n```\n\ncase_when follows (condition ~ result), evaluates each condition in order, and if it finds the first TRUE condition for a row, it applies the corresponding result. DONE \n```{r flag_filter_public_rows}\nlac_naics24 <- lac_naics24 %>% \n  mutate(flag = ifelse(lac_naics24$own_code == 3, TRUE, FALSE)) %>% \n  filter(flag == FALSE)\noc_naics24 <- oc_naics24 %>% \n  mutate(flag = ifelse(oc_naics24$own_code == 3, TRUE, FALSE)) %>% \n  filter(flag == FALSE)\n#sb_naics24$flag <- sb_naics24 %>% \n  #mutate(flag = (case_when(own_code == 3 | own_code == 1 ~ TRUE,\n  #         TRUE ~ FALSE ))) #general condition!! \nsb_naics24 <- sb_naics24 %>% \n  mutate(flag = case_when(own_code==3 | own_code ==1 ~ TRUE,\n                          TRUE ~ FALSE)) %>% \n  filter(flag == FALSE) #FILTER public oor fed govt rows out\n\n```\n\n```{r assign_industry24}\n# Applying function 2 - assigning industry  \nlac_naics24 <- lac_naics24 %>% \n  mutate(industry = \n           (assign_industry_fun(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())\n\noc_naics24 <- oc_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% \n  mutate(industry = \n           (industry_fun24(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())\n\nsb_naics24 <- sb_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% \n  mutate(industry = \n           (industry_fun24(naics, taxable_qtrly_wages))) %>% \n  select(1:2, industry, everything())#remove unwanted row of public fast food establishment\n```\n\n```{r failed_merge}\n#industry <- merge(lac_naics2, oc_naics, by = c(\"fips\", \"naics\"), all = \"TRUE\")\n#industry <- merge(industry, sb_naics, by = c(\"fips\", \"naics\"), all = \"TRUE\")\n#str(industry)\n#rm(industry) #left join nor full join achieve deisred result, need tidydata see below\n```\n\nNote: What other industries are we interested in viewing employment\nstatistics on?\n\n```{r bind_rows_merge}\n#add county identifier \nlac_naics2$county <- \"Los Angeles County\"\noc_naics$county <- \"Orange County\"\nsb_naics$county <- \"San Bernardino County\"\n#BIND ROW\nindustries <- bind_rows(lac_naics2, oc_naics, sb_naics) %>% \n  select(1, county, everything()) \nindustries <- industries[-c(1,6,11), ] #success: removed warehouse public\n#print(names(industries))\n#industries <- industries\n\n#merge 2024 \nlac_naics24$county <- \"Los Angeles County\"\noc_naics24$county <- \"Orange County\"\nsb_naics24$county <- \"San Bernardino County\"\n#BIND ROW\nindustries24 <- bind_rows(lac_naics24, oc_naics24, sb_naics24) %>% \n  select(1, county, everything()) \n\nindustries24 <- industries24 %>%  select(-c(3, 6:7, 10))\n```\n### ran into issues in bind row merge some NA's that are fine but parse out the rows rthat have 0 taxable qtrly wages etc, no industry value in lac_naics24 -- Issue solved! \nSummary statistics.w/ Summarytools pkg\n\n```{r summary_tools_descriptive_stats}\n#str(industries24)\nindustries24 %>% \n  select(-c(fips, naics)) %>% \n  dfSummary(\n    graph.col = TRUE, style = \"grid\", \n    graph.magnif = 0.75\n  ) %>% stview()\n```\n\n```{r establishment_ bycounty_visual}\n#DESCRIPTIVE STATS \np <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = county)) \np1 <- p + geom_bar(stat = \"identity\", position = \"dodge\") + labs(title = \"Total Industry Establishments by County (2023)\", \n       y = \"Annual Average Establishments\",\n       x = \"Industry\",\n       caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np1 <- p1 + theme_linedraw() + theme(axis.text.x = element_text(angle = 15, hjust = 1))\n# p1 + theme_fivethirtyeight()\n```\n\n```{r industry_bycounty_visual, results = 'hide'}\n#By industry, faceted into three counties \np2 <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = industry)) + \n  geom_bar(stat = \"identity\", position = \"dodge\") + labs(title = \"Total Industry Establishments by County (2023)\", y = \"Annual Average Establishments\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) #not good? no real county info (base layer)\n```\n\n```{r industry_bycounty_visual2}\np2 <- p2 + theme_linedraw()+ facet_wrap(~ county) + theme(axis.text.x = element_text(angle = 25, hjust = 1)) #good but too crowded right now \n# annual_avg_emplvl\n# preview the different warehouse employment for warehouses across counties\np2\n```\n\nFrom this figure we can see the lion's share of employment that is the\nfast food industry. Los Anegeles County through its sheer size, of\ncourse, constitutes a majority of the total count of fast food\nrestaurants. Cutting the fast food industry out of the picture we can\nzoom in on\\\n\\### San Bernardino County\n\n```{r sb_industry_count }\nindustries_filter <- industries %>% \n  filter(county == \"San Bernardino County\")\np3 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_estabs, fill = industry)) + geom_bar(stat = \"identity\", position = \"dodge\", width = 0.5) + labs(title = \"Industry Total in San Bernardino County (2023)\", y = \"Annual Average Establishments\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np3 <- p3 + theme_linedraw() +theme(axis.text.x = element_text(angle = -370, hjust = 0))+ coord_cartesian(ylim = c(0,750))\np3\n```\n\n```{r wages}\nindustries_filter <- industries %>% \n  filter(county == \"San Bernardino County\")\np4 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_wkly_wage, fill = industry)) + geom_bar(stat = \"identity\", width = 0.5) + labs(title = \"Average Weekly Wages in San Bernardino County (2023)\", y = \"Average Weekly wages\", x = \"Industry\", caption = \"Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages\" ) \np4 <- p4 + theme_linedraw() + theme(axis.text.x = element_text(angle = -370, hjust = 0))\np4\n# print(names(industries))\n```\n\n```{r fig.show='hold', out.width=\"100%\"}\n#Showing two figures never works!!! figure it out soon \n## p1 + p2\n```\n\n## Bureau of Labor Statistics Quarterly Census on Employment and Wages(QCEW) 2023\n\n```{r sample_area_df, echo = FALSE}\n#DONE sample NAICS df, To do: download LA and OC and include all of them in this df preview\nindustries2 <- industries_filter[-c(1,3,5)]\nindustries %>%\n  kbl(table.attr = 'data-quarto-disable-processing=\"true\"', \n      caption = \"QCEW 2023\") %>% \n  scroll_box(width = \"90%\", height = \"400px\" ) %>% \n  kable_styling(bootstrap_options = c(\"striped\", \"condensed\"), \n                full_width = F) \n  \n```\n\n**Notes on. kable styling: column_spec!!!** mtcars\\[1:8, 1:8\\] %\\>%\nkbl() %\\>% kable_paper(full_width = F) %\\>% column_spec(2, color =\nspec_color(mtcars$mpg[1:8]),\n              link = \"https://haozhu233.github.io/kableExtra/\") %>%\n  column_spec(6, color = \"white\",\n              background = spec_color(mtcars$drat\\[1:8\\], end = 0.7),\npopover = paste(\"am:\", mtcars\\$am\\[1:8\\]))\n\nWhat about text wrapping? if i want ot align_right how can I write that\ntext? might have to use a function? Currently alright right doesnt work\nwell bcus table is huge\n\n```{r osm_nominatum_api}\n#library(osmdata)\n# bounding box \n# lac_bb <- getbb(\"Los Angeles County, California\")\n# url <- \"http://httpbin.org/ip\"\n# ip <- httr::GET(url)\n# httr::content(ip)\n# httr::GET(\"https://nominatim.openstreetmap.org/search?q=Los+Angeles+County+California&format=json\")\n# above doesnt work, use places API instead, nominatum uses sf files to plot \n# exmaple below: mapview(pharmacies_sf$osm_points, zcol = \"name\")\n```\n\n```{r}\n#installed <- as.data.frame(installed.packages())\n\n#write.csv(installed, 'installed_previously.csv')\n```\n\nPlaces API (new): includes nearby search and text search The main\ndifference between the two searches is that Text Search (New) lets you\nspecify an arbitrary search string while Nearby Search (New) requires a\nspecific area in which to search. Places API (not new):\\\n- A Place Search returns a list of places along with summary information\nabout each place; additional information is available via a Place\nDetails query.\n\n```{r streets_api}\nget_places <- function(api_key, location, radius = 25000, type = \"restaurant\") {\n  base_url <- \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n  all_places <- data.frame()\n  next_page_token <- NULL\n\n  repeat {\n    response <- GET(base_url, query = list(\n      location = location,\n      radius = radius,\n      type = type,\n      keyword = \"fast food\",\n      key = api_key,\n      pagetoken = next_page_token\n    ))\n    content <- content(response, \"parsed\")\n    \n    if (content$status != \"OK\") {\n      stop(\"API request was not successful: \", content$status)\n    }\n    places <- content$results\n    places_df <- data.frame(\n      name = sapply(places, function(x) x$name),\n      lat = sapply(places, function(x) x$geometry$location$lat),\n      lng = sapply(places, function(x) x$geometry$location$lng),\n      address = sapply(places, function(x) x$vicinity)\n    )\n    all_places <- rbind(all_places, places_df)\n    if (!is.null(content$next_page_token)) {\n      next_page_token <- content$next_page_token\n      Sys.sleep(2)  # Required delay before using next_page_token\n    } else {\n      break\n    }\n  }\n  return(all_places)\n}\n#defined a function above to query the API\n\napi_key <- \"AIzaSyDxCIOyFiUyQyPDMkoSfJntu_JQPhGPLOI\"\nla_center_cooridnate <- \"34.0522,-118.2437\" # negative for west i believe \nradius <- 25000 #25000 km  #25 km ~ 15 mi \n\nffood_geoloc <- get_places(api_key, la_center_cooridnate, radius, type = \"restaurant\")\n```\n\n## Mapping the Fast Food Industry\n\n```{r map1}\n#create map widget, initial layer \nm <- leaflet(data = ffood_geoloc) %>% \n  addTiles()\nm %>% addCircleMarkers(\n  ~lng, ~lat, # ~ calls the columns from df above, positions markers on map\n  label = ~paste(name, address), \n  radius = 3\n)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["assets_css/styles.css"],"toc":true,"output-file":"heat_and_occupation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","exclude":["websrape.qmd"],"theme":"sandstone","title":"Indoor Heat and Occupation","date":"8/16/2024","editor_options":{"markdown":{"wrap":72}},"toc_float":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}