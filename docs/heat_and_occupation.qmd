---
title: "Indoor Heat and Occupation"
date: "8/16/2024"
format: 
  html: 
    echo: false
    toc: true
    toc_float: true
    
editor_options: 
  markdown: 
    wrap: 72
---

# On the job, with Heat.

Seven California workers died from indoor heat from [2010 to
2017](https://www.rand.org/pubs/working_papers/WRA1386-1.html). The real
number is believed to be significantly higher, however, it remains
consistently under-reported of the lack of recognition of indoor heat as
a factor in these cases of death. Many more ED visits can actually be
attributed to heat but aren't reported as an underlying cause of

Los Angeles County. San Bernardino County. Orange County. A southern
California paradise? Or a microcosm of the labor fight?

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(readr)
#install.packages("patchwork")
library(patchwork)
library(kableExtra)
library(ggthemes)
library(readxl)
library(janitor)
library(tidyverse)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stargazer)
library(gridExtra)
library(caret)
library(car)
#install.packages("sf")
library(sf)
library(usmap)
library(RColorBrewer)
library(maps)
library(mapdata)
library(leaflet)
library(lubridate)
library(choroplethr)
#install.packages("countyweather")  #not available for this R version
#install.packages("rnoaa")
library(sp)
library(spatial)
library(devtools)
#install.packages("osmdata")
library(mapview)
library(osmdata)
#install.packages("httr")
library(httr)
# install.packages("summarytools")
library(summarytools)
```

```{r load_qcew_by_area23, include= FALSE}
lac_naics <- read.csv("lac_naics23")
oc_naics <- read.csv("oc_naics23")
sb_naics <- read.csv("sb_naics23")
```

#### subsetting for naics industries of interest

```{r subset_naics_industry23}
lac_naics <-  lac_naics %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter for NAICS obsvr that r in this vector
                      "493110", "722513"))
# NA check below, can ignore 
#lapply(lac_naics2, function(x) sum(is.na(x))) # 0 NA's as expected? yes
#print(names(lac_naics))
lac_naics <- lac_naics[-c(1,5:6, 9, 17, 25)]  #removing non-interest vars

oc_naics <-  oc_naics %>% # Industries of interest below in LA county
  rename(fips = area_fips, 
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513"))

oc_naics <- oc_naics[-c(1, 7, 10, 18,26)] 
sb_naics <- sb_naics %>% 
  rename(fips = area_fips,
         naics = industry_code) %>% 
  filter(naics %in% c("811192", "315",   # %>%, filter: see if NAICS obsvr r in the vector
                      "493110", "722513")) 
sb_naics <- sb_naics[-c(1, 7, 10, 18,26)] 
```

```{r assign_industry23}
assign_industry_fun <- function(naics, taxable_annual_wages) {
  industry <- case_when( 
    # More specific & condition first
    naics == 493110 & taxable_annual_wages == 0 ~ "Warehouse & Storage (public)",  
    naics == 493110 ~ "Warehouse & Storage",  # General condition second
    naics == 722513 ~ "Fast Food",
    naics == 811192 ~ "Car Wash",
    naics == 315 ~ "Apparel Mfg.", 
    TRUE ~ NA_character_
  )
  return(industry)
}
## Case_when function is great for creating new rows based on conditions, great to use with filter in order to remove rows i believe 
#function 2 for 2024 Q1
industry_fun24 <- function(naics, taxable_qtrly_wages) {
  industry <- case_when( 
    # More specific & condition first
    naics == 493110 & taxable_qtrly_wages == 0 ~ "Warehouse & Storage (public)",  
    naics == 493110 ~ "Warehouse & Storage",  # General condition second
    naics == 722513 ~ "Fast Food",
    naics == 811192 ~ "Car Wash",
    naics == 315 ~ "Apparel Mfg.", 
    TRUE ~ NA_character_
  )
  return(industry)
}
#Applying Function 1 - assign industry to different 
lac_naics <- lac_naics %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen
  select(1:2, industry, everything())             # function only applies to vectorized lists not entire df 

oc_naics <- oc_naics %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen
  select(1:2, industry, everything())   

sb_naics <- sb_naics %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_annual_wages))) %>% # apply mutate to industry col bcus casewhen
  select(1:2, industry, everything())   
#str(lac_naics2)
#troubleshootign function -- it works 
#lac_naics2 %>% 
  #filter(naics == 493110) %>% #filter for warehouse 
  #select(industry, naics, taxable_annual_wages)

```

#### Calling 2024 QCEW data

-   Calculating % change great
    [Rpubs](https://rpubs.com/techanswers88/RateOfChange) article with
    visuals. If comparing percent change of Q1 24 and Q1 23 then I must
    download Q1 23 data.

    -   [Percentage
        change](https://ec.europa.eu/eurostat/statistics-explained/index.php?title=Beginners:Statistical_concept_-_Percentage_change_and_percentage_points#:~:text=When%20you%20have%20data%20for,change%2C%20i.e.%20the%20percentage%20change.)When
        you have data for two points in time, you can calculate how much
        change there has been during this period. The result is
        expressed as a percentage (in absolute numbers, it's just a
        difference) and is called the rate of change, i.e. the
        percentage change. It is calculated as follows: \[(Number at
        later time รท Number at earlier time) - 1\] ร 100.

        Example In 2010, there were 4.8 million persons employed in
        country X and in 2015 there were 5.2 million. The percentage
        change from 2010 to 2015 is then calculated as follows: \[(5.2 รท
        4.8)-1\] x 100= +8.3%

-   **marijuana NAICS: 459991** Marijuana stores, medical or
    recreational

-   NAICS **812300 - Drycleaning and Laundry Services**

-   **maintenance workers** NAICS: **561720**, cleaning offices/ homes,
    building cleaning services, residential cleaning services

```{r all_2024}
#2024 Q1 - call data 
lac_naics24 <- read.csv("lac_naics24.csv")
oc_naics24 <- read.csv("oc_naics24.csv")
sb_naics24 <- read.csv("sb_naics24.csv")
```

case_when follows (condition \~ result), evaluates each condition in
order, and if it finds the first TRUE condition for a row, it applies
the corresponding result. DONE

```{r flag_filter_public_rows}
#filter public/ federal for 2023 
lac_naics <- lac_naics %>% 
  mutate(flag = ifelse(lac_naics$own_code == 3, TRUE, FALSE)) %>% 
  filter(flag == FALSE)
oc_naics <- oc_naics %>% 
  mutate(flag = ifelse(oc_naics$own_code == 3, TRUE, FALSE)) %>% 
  filter(flag == FALSE)
#sb_naics24$flag <- sb_naics24 %>% 
  #mutate(flag = (case_when(own_code == 3 | own_code == 1 ~ TRUE,
  #         TRUE ~ FALSE ))) #general condition!! 
sb_naics <- sb_naics %>% 
  mutate(flag = case_when(own_code==3 | own_code ==1 ~ TRUE,
                          TRUE ~ FALSE)) %>% 
  filter(flag == FALSE)

```

```{r assign_industry24, eval = FALSE}
# Applying function 2 - assigning industry  
lac_naics24 <- lac_naics24 %>% 
  mutate(industry = 
           (assign_industry_fun(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())

oc_naics24 <- oc_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% 
  mutate(industry = 
           (industry_fun24(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())

sb_naics24 <- sb_naics24[-c(2, 4:5, 7:8, 17, 26)] %>% 
  mutate(industry = 
           (industry_fun24(naics, taxable_qtrly_wages))) %>% 
  select(1:2, industry, everything())#remove unwanted row of public fast food establishment
```

```{r failed_merge}
#industry <- merge(lac_naics2, oc_naics, by = c("fips", "naics"), all = "TRUE")
#industry <- merge(industry, sb_naics, by = c("fips", "naics"), all = "TRUE")
#str(industry)
#rm(industry) #left join nor full join achieve deisred result, need tidydata see below
```

Note: What other industries are we interested in viewing employment
statistics on?

```{r bind_rows_merge_23and24}
#add county identifier 
lac_naics$county <- "Los Angeles County"
oc_naics$county <- "Orange County"
sb_naics$county <- "San Bernardino County"
#BIND ROW 2023 YEAR 
industries <- bind_rows(lac_naics, oc_naics, sb_naics) %>% 
  select(1, county, everything())  #success: removed warehouse public, all have an indsutry and county name, only
# NA is the agg lvl code- not important 
#print(names(industries))
#industries <- industries

#merge 2024 
#add county identifier 
lac_naics24$county <- "Los Angeles County"
oc_naics24$county <- "Orange County"
sb_naics24$county <- "San Bernardino County"
#BIND ROW
industries24 <- bind_rows(lac_naics24, oc_naics24, sb_naics24) %>% 
  select(1, county, everything()) 

industries24 <- industries24 %>%  select(-c(3, 6:7, 10))
```

```{r establishment_ bycounty_visual}
#DESCRIPTIVE STATS 
p <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = county)) 
p1 <- p + geom_bar(stat = "identity", position = "dodge") + labs(title = "Total Industry Establishments by County (2023)", 
       y = "Annual Average Establishments",
       x = "Industry",
       caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p1 <- p1 + theme_linedraw() + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# p1 + theme_fivethirtyeight()
p1
```

```{r industry_bycounty_visual, results = 'hide'}
#By industry, faceted into three counties 
p2 <- ggplot(data = industries, aes(x = industry, y = annual_avg_estabs, fill = industry)) + 
  geom_bar(stat = "identity", position = "dodge") + labs(title = "Total Industry Establishments by County (2023)", y = "Annual Average Establishments", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) + theme_linedraw()+ facet_wrap(~ county) + theme(axis.text.x = element_text(angle = 25, hjust = 1)) 
```

```{r industry_bycounty_visual2}
p2
p2.5 <- ggplot(data = industries, aes(x = industry, y = annual_avg_wkly_wage, fill = industry)) + 
  geom_bar(stat = "identity", position = "dodge") + labs(title = "Average weekly wage by County (2023)", y = "Annual Average weekly wage", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages") + theme_linedraw()+ facet_wrap(~ county) + theme(axis.text.x = element_text(angle = 25, hjust = 1))
p2.5
ggsave("avg_wkly_wage23.png", plot = p2.5, width = 8, height = 6)
```

From this figure we can see the lion's share of employment that is the
fast food industry. Los Anegeles County through its sheer size, of
course, constitutes a majority of the total count of fast food
restaurants. Cutting the fast food industry out of the picture we can
zoom in on\
\### San Bernardino County

```{r sb_industry_count}
industries_filter <- industries %>% 
  filter(county == "San Bernardino County")
p3 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_estabs, fill = industry)) + geom_bar(stat = "identity", position = "dodge", width = 0.5) + labs(title = "Industry Total in San Bernardino County (2023)", y = "Annual Average Establishments", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" ) 
p3 <- p3 + theme_linedraw() +theme(axis.text.x = element_text(angle = -370, hjust = 0))+ coord_cartesian(ylim = c(0,750))
p3
```

```{r ff_wages_by_county23}
industries_filter <- industries %>% filter(industry == "Fast Food")

p4 <- ggplot(data = industries_filter, aes(x = county, y = annual_avg_wkly_wage, fill = county)) + 
  geom_bar(stat = "identity", width = 0.5) + 
  labs(title = "Average Weekly Wages in LA, OC, and SB County (2023)", 
       y = "Average Weekly wages", 
       x = "Industry", 
       caption = "Source: Bureau of Labor Statistics Quarterly Census on Employment and Wages") +
  theme_linedraw() + 
  theme(axis.text.x = element_text(angle = -370, hjust = 0))
p4
# print(names(industries))
```

annual_avg_emplvl

total_annual_wages

annual_avg_estabs

avg annual pay - done for ff and ware

annual_avg_wkly_wage - done for ff and ware

annual_contributions - annual taxable wages what they contirbute to gov
programs etc avg_annual_pay

```{r avg_wage_lac23}
industries_filter <- industries %>% 
  filter(county == "Los Angeles County")
p5 <- ggplot(data = industries_filter, aes(x = industry,y = annual_avg_wkly_wage, fill = industry)) + geom_bar(stat = "identity", width = 0.5) + labs(title = "Average Weekly Wages in Los Angeles County (2023)", y = "Average Weekly wages", x = "Industry", caption = "Source: Buruea of Labor Statistics Quarterly Census on Employment and Wages" )
p5
p4 <- p4 + theme_linedraw() + theme(axis.text.x = element_text(angle = -370, hjust = 0))
p4
```

## Bureau of Labor Statistics Quarterly Census on Employment and Wages(QCEW) 2023

```{r sample_area_df, echo = FALSE}
#DONE sample NAICS df, To do: download LA and OC and include all of them in this df preview
industries2 <- industries_filter[-c(1,3,5)]
industries %>%
  kbl(table.attr = 'data-quarto-disable-processing="true"', 
      caption = "QCEW 2023") %>% 
  scroll_box(width = "90%", height = "400px" ) %>% 
  kable_styling(bootstrap_options = c("striped", "condensed"), 
                full_width = F) 
  
```

**Notes on. kable styling: column_spec!!!** mtcars\[1:8, 1:8\] %\>%
kbl() %\>% kable_paper(full_width = F) %\>% column_spec(2, color =
spec_color(mtcars$mpg[1:8]),
              link = "https://haozhu233.github.io/kableExtra/") %>%
  column_spec(6, color = "white",
              background = spec_color(mtcars$drat\[1:8\], end = 0.7),
popover = paste("am:", mtcars\$am\[1:8\]))

What about text wrapping? if i want ot align_right how can I write that
text? might have to use a function? Currently alright right doesnt work
well bcus table is huge

```{r osm_nominatum_api}
#library(osmdata)
# bounding box 
# lac_bb <- getbb("Los Angeles County, California")
# url <- "http://httpbin.org/ip"
# ip <- httr::GET(url)
# httr::content(ip)
# httr::GET("https://nominatim.openstreetmap.org/search?q=Los+Angeles+County+California&format=json")
# above doesnt work, use places API instead, nominatum uses sf files to plot 
# exmaple below: mapview(pharmacies_sf$osm_points, zcol = "name")
```

```{r}
#installed <- as.data.frame(installed.packages())

#write.csv(installed, 'installed_previously.csv')
```

Places API (new): includes nearby search and text search The main
difference between the two searches is that Text Search (New) lets you
specify an arbitrary search string while Nearby Search (New) requires a
specific area in which to search. Places API (not new):\
- A Place Search returns a list of places along with summary information
about each place; additional information is available via a Place
Details query.

```{r streets_api}
get_places <- function(api_key, location, radius = 25000, type = "restaurant") {
  base_url <- "https://maps.googleapis.com/maps/api/place/nearbysearch/json"
  all_places <- data.frame()
  next_page_token <- NULL

  repeat {
    response <- GET(base_url, query = list(
      location = location,
      radius = radius,
      type = type,
      keyword = "fast food",
      key = api_key,
      pagetoken = next_page_token
    ))
    content <- content(response, "parsed")
    
    if (content$status != "OK") {
      stop("API request was not successful: ", content$status)
    }
    places <- content$results
    places_df <- data.frame(
      name = sapply(places, function(x) x$name),
      lat = sapply(places, function(x) x$geometry$location$lat),
      lng = sapply(places, function(x) x$geometry$location$lng),
      address = sapply(places, function(x) x$vicinity)
    )
    all_places <- rbind(all_places, places_df)
    if (!is.null(content$next_page_token)) {
      next_page_token <- content$next_page_token
      Sys.sleep(2)  # Required delay before using next_page_token
    } else {
      break
    }
  }
  return(all_places)
}
#defined a function above to query the API

api_key <- "MY API KEY"
la_center_cooridnate <- "34.0522,-118.2437" # negative for west i believe 
radius <- 25000 #25000 km  #25 km ~ 15 mi 

ffood_geoloc <- get_places(api_key, la_center_cooridnate, radius, type = "restaurant")
```

## Mapping the Fast Food Industry

```{r map1}
#create map widget, initial layer 
m <- leaflet(data = ffood_geoloc) %>% 
  addTiles()
m %>% addCircleMarkers(
  ~lng, ~lat, # ~ calls the columns from df above, positions markers on map
  label = ~paste(name, address), 
  radius = 3
)
```
